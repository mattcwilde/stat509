p <- 1 - pbinom(1, size=m, prob=0.15)
if (p < 0.85) print(paste(p, m))
}
for (m in (n-k):0){
numerator <- lfactorial(n - k) + lfactorial(n-m)
denominator <- lfactorial(n) + lfactorial(n-k-m)
p <- 1 - exp(numerator - denominator)
if (p < 0.85) print(paste(p, m))
}
n <-10000
k <-150
for (m in (n-k):0){
numerator <- lfactorial(n - k) + lfactorial(n-m)
denominator <- lfactorial(n) + lfactorial(n-k-m)
p <- 1 - exp(numerator - denominator)
if (p < 0.85) print(paste(p, m))
}
for (m in (n-k):0){
p <- 1 - pbinom(1, size=m, prob=0.15)
if (p < 0.85) print(paste(p, m))
}
for (m in (n-k):0){
p <- 1 - pbinom(1, size=m, prob=0.015)
if (p < 0.85) print(paste(p, m))
}
for (m in (n-k):0){
p <- 1 - pbinom(1, size=m, prob=(k/n))
if (p < 0.85) print(paste(p, m))
}
if (p < 0.80) print(paste(p, m))
for (m in (n-k):0){
p <- 1 - pbinom(1, size=m, prob=(k/n))
if (p < 0.80) print(paste(p, m))
}
for (m in (n-k):0){
p <- 1 - pbinom(1, size=m, prob=(k/n))
if (abs(p - 0.8) < 0.1) print(paste(p, m))
}
for (m in (n-k):0){
p <- 1 - pbinom(1, size=m, prob=(k/n))
if (abs(p - 0.8) < 0.1) print(paste(p, m))
}
if (abs(p - 0.8) < 0.02) print(paste(p, m))
for (m in (n-k):0){
p <- 1 - pbinom(1, size=m, prob=(k/n))
if (abs(p - 0.8) < 0.02) print(paste(p, m))
}
if (abs(p - 0.8) < 0.01) print(paste(p, m))
if (abs(p - 0.8) < 0.001) print(paste(p, m))
for (m in (n-k):0){
p <- 1 - pbinom(1, size=m, prob=(k/n))
if (abs(p - 0.8) < 0.001) print(paste(p, m))
}
for (m in (n-k):0){
p <- 1 - pbinom(1, size=m, prob=(k/n))
if (abs(p - 0.8) < 0.001) print(paste(p, m))
}
for (m in (n-k):0){
p <- 1 - pbinom(1, size=m, prob=(k/n))
if (abs(p - 0.8) < 0.001) print(paste(p, m))
}
n <-10000
k <-150
for (m in (n-k):0){
numerator <- lfactorial(n - k) + lfactorial(n-m)
denominator <- lfactorial(n) + lfactorial(n-k-m)
p <- 1 - exp(numerator - denominator)
if (abs(p - 0.8) < 0.001) print(paste(p, m))
}
for (m in (n-k):0){
p <- 1 - pbinom(0, size=m, prob=(k/n))
if (abs(p - 0.8) < 0.001) print(paste(p, m))
}
for (m in (n-k):0){
p <- 1 - pbinom(0, size=m, prob=(k/n))
if (abs(p - 0.8) < 0.001) print(paste(p, m))
}
n <-10000
k <-150
for (m in (n-k):0){
numerator <- lfactorial(n - k) + lfactorial(n-m)
denominator <- lfactorial(n) + lfactorial(n-k-m)
p <- 1 - exp(numerator - denominator)
if (abs(p - 0.8) < 0.001) print(paste(p, m))
}
source('~/Dropbox/Courses/Statistics/hw1.R')
for (m in (n-k):1){
numerator <- lfactorial(n - k) + lfactorial(n-m)
denominator <- lfactorial(n) + lfactorial(n-k-m)
p <- 1 - exp(numerator - denominator)
if (abs(p - 0.8) < 0.001) print(paste(p, m))
}
source('~/Dropbox/Courses/Statistics/hw1.R')
n <-10000
k <-150
for (m in (n-k):1){
numerator <- lfactorial(n - k) + lfactorial(n-m)
denominator <- lfactorial(n) + lfactorial(n-k-m)
p <- 1 - exp(numerator - denominator)
if (abs(p - 0.8) < 0.001) print(paste(p, m))
}
n <-1000
k <-15
for (m in (n-k):1){
numerator <- lfactorial(n - k) + lfactorial(n-m)
denominator <- lfactorial(n) + lfactorial(n-k-m)
p <- 1 - exp(numerator - denominator)
if (abs(p - 0.8) < 0.001) print(paste(p, m))
}
for (m in (n-k):1){
numerator <- lfactorial(n - k) + lfactorial(n-m)
denominator <- lfactorial(n) + lfactorial(n-k-m)
p <- 1 - exp(numerator - denominator)
if (abs(p - 0.8) < 0.01) print(paste(p, m))
}
n <-10000
k <-150
for (m in (n-k):1){
numerator <- lfactorial(n - k) + lfactorial(n-m)
denominator <- lfactorial(n) + lfactorial(n-k-m)
p <- 1 - exp(numerator - denominator)
if (abs(p - 0.8) < 0.01) print(paste(p, m))
}
for (m in (n-k):1){
p <- 1 - pbinom(0, size=m, prob=(k/n))
if (abs(p - 0.8) < 0.001) print(paste(p, m))
}
for (m in (n-k):1){
p <- 1 - pbinom(0, size=m, prob=(k/n))
if (abs(p - 0.8) < 0.001) print(paste(p, m))
}
if (abs(p - 0.8) < 0.01) print(paste(p, m))
for (m in (n-k):1){
p <- 1 - pbinom(0, size=m, prob=(k/n))
if (abs(p - 0.8) < 0.01) print(paste(p, m))
}
source('~/Dropbox/Courses/Statistics/Examples/mass-funcitons.R')
p <- 0.1
dbinom(1,1,p) # P(X=1) = p
source('~/Dropbox/Courses/Statistics/Examples/mass-funcitons.R')
source('~/Dropbox/Courses/Statistics/Examples/mass-funcitons.R')
source('~/Dropbox/Courses/Statistics/Examples/mass-funcitons.R')
source('~/Dropbox/Courses/Statistics/Examples/mass-funcitons.R')
source('~/Dropbox/Courses/Statistics/Examples/mass-funcitons.R')
source('~/Dropbox/Courses/Statistics/Examples/mass-funcitons.R')
source('~/Dropbox/Courses/Statistics/Examples/cdf-examples.R')
source('~/Dropbox/Courses/Statistics/Examples/mass-funcitons.R')
source('~/Dropbox/Courses/Statistics/Examples/mass-funcitons.R')
source('~/Dropbox/Courses/Statistics/Examples/mass-funcitons.R')
source('~/Dropbox/Courses/Statistics/Examples/mass-funcitons.R')
source('~/Dropbox/Courses/Statistics/Examples/mass-funcitons.R')
source('~/Dropbox/Courses/Statistics/Examples/mass-funcitons.R')
dbinom(1,1,p) # P(X=1) = p
dbinom(1,1,p) # P(X=1) = p
dbinom(1,1,p) # P(X=1) = p
dbinom(1,1,p) # P(X=1) = p
dbinom(1,1,p) # P(X=1) = p
source('~/Dropbox/Courses/Statistics/Examples/mass-funcitons.R')
source('~/Dropbox/Courses/Statistics/Examples/mass-funcitons.R')
k = c(1:5)
p = c(2/3^k)
X5 = sum(rbinom(5, 1, 0.5)*p)
X5
k
p
rbinom(5, 1, 0.5)
sum(rbinom(5, 1, 0.5)*p)
sum(rbinom(5, 1, 0.5)*p)
sum(rbinom(5, 1, 0.5)*p)
8/9
c()
dist = c()
for (i in 1:10000){
# points after 5 flips
X5 = sum(rbinom(5, 1, 0.5)*p)
dist = c()
}
dist = c()
for (i in 1:10000){
# points after 5 flips
X5 = sum(rbinom(5, 1, 0.5)*p)
append(dist, X5)
}
hist(dist)
dist
dist = c(0.666666)
for (i in 1:10000){
# points after 5 flips
X5 = sum(rbinom(5, 1, 0.5)*p)
append(dist, X5)
}
dist
X5 = sum(rbinom(5, 1, 0.5)*p)
append(dist, X5)
append(dist, X5)
dist = list()
for (i in 1:10000){
# points after 5 flips
X5 = sum(rbinom(5, 1, 0.5)*p)
append(dist, X5)
X5 = 0
}
dist
dist = list()
for (i in 1:10000){
# points after 5 flips
X5 = sum(rbinom(5, 1, 0.5)*p)
dist[i] = X5
}
print(dist)
hist(dist)
dist = list()
for (i in 1:10000){
# points after 5 flips
X5 = sum(rbinom(5, 1, 0.5)*p)
dist[i] = X5
}
hist(dist)
dist
dist = c()
for (i in 1:10000){
# points after 5 flips
X5 = sum(rbinom(5, 1, 0.5)*p)
dist[i] = X5
}
hist(dist)
plot.ecdf(dist)
dist = c()
for (i in 1:1000000){
# points after 5 flips
X5 = sum(rbinom(5, 1, 0.5)*p)
dist[i] = X5
}
hist(dist)
plot.ecdf(dist)
dist = c()
for (i in 1:1000){
# points after 5 flips
X5 = sum(rbinom(5, 1, 0.5)*p)
dist[i] = X5
}
hist(dist)
plot.ecdf(dist)
?hist
hist(dist/1000)
hist(dist)/1000
?hist
hist(dist, probability = True)
plot.ecdf(dist)
hist(dist, probability = True)
hist(dist, probability = TRUE)
source('~/Dropbox/Courses/Statistics/HW2/hw2.R')
source('~/Dropbox/Courses/Statistics/HW2/hw2.R')
source('~/Dropbox/Courses/Statistics/HW2/hw2.R')
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
?rbinom
source("test.R")
x = seq(0,100)
print(x)
plot.ecdf(vals)
vals = rbinom(x, 2, 0.1)
vals = c(rbinom(x, 2, 0.1))
source('~/Dropbox/Courses/Statistics/HW2/test.R')
source('~/Dropbox/Courses/Statistics/HW2/test.R')
source('~/Dropbox/Courses/Statistics/HW2/test.R')
rbinom(1,1,p)
rbinom(1,1,p)
rbinom(1,1,p)
rbinom(1,1,p)
rbinom(1000, 1, 0.1)
sum(rbinom(1000, 1, 0.1))/1000
sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000+ sum(rbinom(1000, 1, 0.1))/1000+sum(rbinom(1000, 1, 0.1))/1000
sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000+ sum(rbinom(1000, 1, 0.1))/1000+sum(rbinom(1000, 1, 0.1))/1000
sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000+ sum(rbinom(1000, 1, 0.1))/1000+sum(rbinom(1000, 1, 0.1))/1000
sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000+ sum(rbinom(1000, 1, 0.1))/1000+sum(rbinom(1000, 1, 0.1))/1000
sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000+ sum(rbinom(1000, 1, 0.1))/1000+sum(rbinom(1000, 1, 0.1))/1000
sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000+ sum(rbinom(1000, 1, 0.1))/1000+sum(rbinom(1000, 1, 0.1))/1000
sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000+ sum(rbinom(1000, 1, 0.1))/1000+sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000
sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000+ sum(rbinom(1000, 1, 0.1))/1000+sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000
sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000+ sum(rbinom(1000, 1, 0.1))/1000+sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000
sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000+ sum(rbinom(1000, 1, 0.1))/1000+sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000
sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000+ sum(rbinom(1000, 1, 0.1))/1000+sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000
rbinom(2, 1, 0.1)*1000
rbinom(2, 1, 0.1)*1000
rbinom(2, 1, 0.1)*1000
rbinom(2, 1, 0.1)*1000
rbinom(2, 1, 0.1)*1000
rbinom(2, 1, 0.1)*1000
sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000+ sum(rbinom(1000, 1, 0.1))/1000+sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000
sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000+ sum(rbinom(1000, 1, 0.1))/1000+sum(rbinom(1000, 1, 0.1))/1000 + sum(rbinom(1000, 1, 0.1))/1000
sum(rbinom(1000, 1, 0.1))/1000 *0.5/0.1
sum(rbinom(10, 1, 0.1))/1000 *0.5/0.1
sum(rbinom(10, 1, 0.1))/1000 *0.5/0.1
sum(rbinom(10, 1, 0.1))/1000 *0.5/0.1
sum(rbinom(10, 1, 0.1))/1000 *0.5/0.1
sum(rbinom(10, 1, 0.1))/1000 *0.5/0.1
sum(rbinom(10, 1, 0.1))/1000 *0.5/0.1
sum(rbinom(10, 1, 0.1))/1000 *0.5/0.1
sum(rbinom(10, 1, 0.1))/1000 *0.5/0.1
sum(rbinom(10, 1, 0.1))/1000 *0.5/0.1
sum(rbinom(100, 1, 0.1))/1000 *0.5/0.1
sum(rbinom(100, 1, 0.1))/1000 *0.5/0.1
sum(rbinom(100, 1, 0.1))/1000 *0.5/0.1
sum(rbinom(100, 1, 0.1))/100 *0.5/0.1
sum(rbinom(100, 1, 0.1))/100 *0.5/0.1
sum(rbinom(100, 1, 0.1))/100 *0.5/0.1
sum(rbinom(100, 1, 0.1))/100 *0.5/0.1
rbinom(1,1,0.1)
rbinom(1,1,0.1)
rbinom(1,1,0.1)
rbinom(1,1,0.1)
rbinom(1,1,0.1)
rbinom(1,1,0.1)
rbinom(1,1,0.1)
rbinom(1,1,0.1)
rbinom(1,1,0.1)
sum(rbinom(100, 1, 0.1))/100 *0.5/0.1
rbinom(1,1,0.1)
success = FALSE
while (!success){
k = k + 1
p = rbinom(1,1,0.1) + rbinom(1,1,0.1)
if (p == 1){
print(k)
success = TRUE
}
}
p = rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)
rbinom(1,1,0.1) + rbinom(1,1,0.1)rbinom(1,1,0.1) + rbinom(1,1,0.1)
success = FALSE
k = 0
while (!success){
k = k + 1
p = rbinom(1,1,0.1) + rbinom(1,1,0.1)
if (p == 1){
print(k)
success = TRUE
}
}
success = FALSE
k = 0
while (!success){
k = k + 1
p = rbinom(1,1,0.1) + rbinom(1,1,0.1)
if (p == 1){
print(k)
success = TRUE
}
}
success = FALSE
k = 0
while (!success){
k = k + 1
p = rbinom(1,1,0.1) + rbinom(1,1,0.1)
if (p == 1){
print(k)
success = TRUE
}
}
success = FALSE
k = 0
while (!success){
k = k + 1
p = rbinom(1,1,0.1) + rbinom(1,1,0.1)
if (p == 1){
print(k)
success = TRUE
}
}
result = c()
i = 0
for (k in 1:1000){
success = FALSE
while (!success){
# flip two coins
p = rbinom(1,1,0.1) + rbinom(1,1,0.1)
k = k + 1
# if 2 coins result in a combo of H and T
if (p == 1){
# print(k)
# assign numnber of tries to get HT/TH to result vector
result[i] = k
# increment result index
i = i + 1
#exit while loop
success = TRUE
}
}
}
hist(result)
mean(result)
result = c()
for (i in 0:1000){
success = FALSE
k = 0
while (!success){
# flip two coins
p = rbinom(1,1,0.1) + rbinom(1,1,0.1)
k = k + 1
# if 2 coins result in a combo of H and T
if (p == 1){
# print(k)
# assign numnber of tries to get HT/TH to result vector
result[i] = k
# increment result index
i = i + 1
#exit while loop
success = TRUE
}
}
}
hist(result)
mean(result)
source('~/Dropbox/Courses/Statistics/HW2/hw2.R')
source('~/Dropbox/Courses/Statistics/HW2/hw2.R')
1 / 0.1
1/(0.1*0.9)
source('~/Dropbox/Courses/Statistics/HW2/hw2.R')
H
source('~/Dropbox/Courses/Statistics/HW2/hw2.R')
source('~/Dropbox/Courses/Statistics/HW2/hw2.R')
P = pweibull(seq(0,1), shape = 4)
plot(P)
P = pweibull(seq(0:1), shape = 4)
plot(P)
?seq
P = pweibull(seq(0,1,0.001), shape = 4)
plot(P)
plot.ecdf(X)
P = pweibull(seq(0,2,0.001), shape = 4)
plot(P)
P = pweibull(seq(0,2,0.001), shape = 4)
plot(P)
par(new = TRUE)
plot.ecdf(X)
source('~/Dropbox/Courses/Statistics/HW2/hw2.R')
source('~/Dropbox/Courses/Statistics/HW2/hw2.R')
plot(P, xlab = "", ylab = "", xaxt = "n", yaxt = "n")
par(new = TRUE)
plot.ecdf(X)
source('~/Dropbox/Courses/Statistics/HW3/hw3.R')
source('~/.active-rstudio-document')
source('~/Dropbox/Courses/Statistics/HW5/hw5_examplt.R')
source('~/Dropbox/Courses/Statistics/HW5/hw5_examplt.R')
educ <- read.table('http://www.stat.washington.edu/tsr/s509/examples/caschool.csv',header=TRUE,sep=",")
names(educ)      #what are vars
educ$ed[1]    # what is the education
educ$wage[1]    # what is the wage
data = read.table('http://www.stat.washington.edu/tsr/s509/examples/caschool.csv',header=TRUE,sep=",")
data
names(data)
source('~/Dropbox/Courses/Statistics/HW5/hw5.R')
source('~/Dropbox/Courses/Statistics/HW5/hw5.R')
data = read.table('caschool.csv', header=TRUE, sep=",")
pwd
!pwd
data = read.table('caschool.csv', header=TRUE, sep=",")
library(readr)
dataset <- read_csv(NULL)
View(dataset)
data = read.table('caschool.csv', header=TRUE, sep=",")
cd Dropbox
source('~/Dropbox/Courses/Statistics/HW5/hw5.R')
setwd("~/Dropbox/Courses/Statistics/HW5")
source('~/Dropbox/Courses/Statistics/HW5/hw5.R')
source('~/Dropbox/Courses/Statistics/HW5/hw5.R')
source('~/Dropbox/Courses/Statistics/HW5/hw5.R')
source('~/Dropbox/Courses/Statistics/HW5/hw5.R')
source('~/Dropbox/Courses/Statistics/HW5/hw5.R')
